Description: Makes the generated HirakiProxy* classes reproducible by using deterministic data structures in JavassistProxyFactory
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: no
--- a/src/main/java/com/zaxxer/hikari/util/JavassistProxyFactory.java
+++ b/src/main/java/com/zaxxer/hikari/util/JavassistProxyFactory.java
@@ -24,7 +24,7 @@
 import java.sql.Statement;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -134,14 +134,14 @@
       targetCt.setModifiers(Modifier.PUBLIC);
 
       // Make a set of method signatures we inherit implementation for, so we don't generate delegates for these
-      Set<String> superSigs = new HashSet<>();
+      Set<String> superSigs = new LinkedHashSet<>();
       for (CtMethod method : superCt.getMethods()) {
          if ((method.getModifiers() & Modifier.FINAL) == Modifier.FINAL) {
             superSigs.add(method.getName() + method.getSignature());
          }
       }
 
-      Set<String> methods = new HashSet<>();
+      Set<String> methods = new LinkedHashSet<>();
       Set<Class<?>> interfaces = getAllInterfaces(primaryInterface);
       for (Class<?> intf : interfaces) {
          CtClass intfCt = classPool.getCtClass(intf.getName());
@@ -227,7 +227,7 @@
 
    private static Set<Class<?>> getAllInterfaces(Class<?> clazz)
    {
-      Set<Class<?>> interfaces = new HashSet<>();
+      Set<Class<?>> interfaces = new LinkedHashSet<>();
       for (Class<?> intf : Arrays.asList(clazz.getInterfaces())) {
          if (intf.getInterfaces().length > 0) {
             interfaces.addAll(getAllInterfaces(intf));
